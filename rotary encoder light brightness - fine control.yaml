esphome:
  name: rotary_encoder_set_brightness_fine
  platform: ESP32
  board: esp32doit-devkit-v1

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.0.25
    gateway: 192.168.0.1
    subnet: 255.255.255.0

# Enable logging
logger:
  #level: INFO
  level: DEBUG

api:

ota:

globals:
  - id: encoder_light_brightness
    type: int
    initial_value: '5'
  - id: multiplier
    type: int
    initial_value: '2'

sensor:
  #******************************************************************************
  # Rotary encoder
  # ESPHome docs: https://esphome.io/components/sensor/rotary_encoder.html
  #******************************************************************************
  - platform: rotary_encoder
    name: "Rotary Encoder"
    id: knob
    pin_a: GPIO2
    pin_b: GPIO4
    resolution: 2
    min_value: 0
    max_value: 10
    filters:
      - debounce: 50ms # debounce the encoder wafers
      - throttle: 100ms # limit updates if the user twists the encoder too fast :D
    on_value:
      then:
        - lambda: |-
            ESP_LOGW("rotary", "rotary enc=%2.1f", x);
            // Use rotary encoder to set the brightness % of a Home Assistant light bulb
            // The "multiplier" (global variable) is used to set the % brightness in steps of 2% from 0-20%, and in 10% steps from 20-100%
            id(encoder_light_brightness) = (int) x;
            if (id(multiplier) == 2) {
              if ((int) x >= 10) {
                id(knob).set_value(2);
                id(encoder_light_brightness) = 2;
                id(multiplier) = 10;
              }
            }
            else if (id(multiplier) == 10) {
              if ((int) x <= 2) {
                id(knob).set_value(10);
                id(encoder_light_brightness) = 10;
                id(multiplier) = 2;
              }
            }
            ESP_LOGW("Rotary Encoder Sensor", "HA light brightness = %d%%", id(encoder_light_brightness) * id(multiplier));
        - homeassistant.service:
            service: light.turn_on
            data:
              entity_id: light.lounge_table_lamp
              brightness_pct: !lambda 'return id(encoder_light_brightness) * id(multiplier);'

